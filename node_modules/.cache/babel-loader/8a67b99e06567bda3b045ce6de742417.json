{"remainingRequest":"/var/www/html/front/node_modules/babel-loader/lib/index.js!/var/www/html/front/src/store/modules/auth/ClientModule.js","dependencies":[{"path":"/var/www/html/front/src/store/modules/auth/ClientModule.js","mtime":1637350838776},{"path":"/var/www/html/front/babel.config.js","mtime":1636015662000},{"path":"/var/www/html/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/front/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi92YXIvd3d3L2h0bWwvZnJvbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKCnZhciBxcyA9IHJlcXVpcmUoJ3F1ZXJ5LXN0cmluZycpOwoKZXhwb3J0IHZhciBDbGllbnRNb2R1bGUgPSB7CiAgc3RhdGU6IHsKICAgIGF1dGhvcml6YXRpb246IGZhbHNlLAogICAgbG9naW46IGZhbHNlLAogICAgdG9rZW46ICIiCiAgfSwKICBtdXRhdGlvbnM6IHsKICAgIFNFVF9BVVRIX1RPS0VOOiBmdW5jdGlvbiBTRVRfQVVUSF9UT0tFTihzdGF0ZSwgcGF5bG9hZCkgewogICAgICBzdGF0ZS50b2tlbiA9IHBheWxvYWQ7CiAgICB9CiAgfSwKICBhY3Rpb25zOiB7CiAgICBsb2dpblVzZXJBY3Rpb246IGZ1bmN0aW9uIGxvZ2luVXNlckFjdGlvbihjb250ZXh0LCBkYXRhKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlLCB0b2tlbiwgdHlwZSwgZGF0ZSwgZXhwaXJlczsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnBvc3QoJ2xvZ2luJywgcXMuc3RyaW5naWZ5KGRhdGEpLCB7CiAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIShyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCdTRVRfQVVUSF9UT0tFTicsIHJlc3BvbnNlLmRhdGEuYWNjZXNzX3Rva2VuKTsKICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YS51c2VyKSk7CiAgICAgICAgICAgICAgICB0b2tlbiA9IHJlc3BvbnNlLmRhdGEuYWNjZXNzX3Rva2VuOwogICAgICAgICAgICAgICAgdHlwZSA9ICdfdG9rZW4nOwogICAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKCk7CiAgICAgICAgICAgICAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAyNCAqIDYwICogNjAgKiAxMDAwKTsKICAgICAgICAgICAgICAgIGV4cGlyZXMgPSBkYXRlLnRvVVRDU3RyaW5nKCk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSAiIi5jb25jYXQodHlwZSwgIiA9ICIpLmNvbmNhdCh0b2tlbiwgIjsgZXhwaXJlcyA9ICIpLmNvbmNhdChleHBpcmVzLCAiOyBwYXRoPS8iKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlLnN0YXR1cyk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZS5zdGF0dXMpOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE4OwogICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0LnQwLnJlc3BvbnNlLnN0YXR1cyk7CgogICAgICAgICAgICAgIGNhc2UgMjE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDE4XV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICByZWdpc3RlclVzZXJBY3Rpb246IGZ1bmN0aW9uIHJlZ2lzdGVyVXNlckFjdGlvbihjb250ZXh0LCBkYXRhKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciByZXNwb25zZSwgdG9rZW4sIHR5cGUsIGRhdGUsIGV4cGlyZXM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KCdyZWdpc3RlcicsIHFzLnN0cmluZ2lmeShkYXRhKSwgewogICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwoKICAgICAgICAgICAgICAgIGlmICghKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDE0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcicsIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmRhdGEudXNlcikpOwogICAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoJ1NFVF9BVVRIX1RPS0VOJywgcmVzcG9uc2UuZGF0YS5hY2Nlc3NfdG9rZW4pOwogICAgICAgICAgICAgICAgdG9rZW4gPSByZXNwb25zZS5kYXRhLmFjY2Vzc190b2tlbjsKICAgICAgICAgICAgICAgIHR5cGUgPSAnX3Rva2VuJzsKICAgICAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSgpOwogICAgICAgICAgICAgICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgMjQgKiA2MCAqIDYwICogMTAwMCk7CiAgICAgICAgICAgICAgICBleHBpcmVzID0gZGF0ZS50b1VUQ1N0cmluZygpOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gIiIuY29uY2F0KHR5cGUsICIgPSAiKS5jb25jYXQodG9rZW4sICI7IGV4cGlyZXMgPSAiKS5jb25jYXQoZXhwaXJlcywgIjsgcGF0aD0vIik7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2Uuc3RhdHVzKTsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZS5zdGF0dXMpOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxNzsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDIudDAucmVzcG9uc2UpOwoKICAgICAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzAsIDE3XV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBsb2dvdXRVc2VyQWN0aW9uOiBmdW5jdGlvbiBsb2dvdXRVc2VyQWN0aW9uKGNvbnRleHQsIGRhdGEpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDA7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucG9zdCgnbG9nb3V0JywgcXMuc3RyaW5naWZ5KGRhdGEpLCB7CiAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQzLnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCEocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHJlc3BvbnNlLnN0YXR1cyk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCByZXNwb25zZS5zdGF0dXMpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDk7CiAgICAgICAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDNbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQzLnQwLnJlc3BvbnNlKTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMywgbnVsbCwgW1swLCA5XV0pOwogICAgICB9KSkoKTsKICAgIH0KICB9LAogIGdldHRlcnM6IHt9Cn07"},{"version":3,"sources":["/var/www/html/front/src/store/modules/auth/ClientModule.js"],"names":["axios","qs","require","ClientModule","state","authorization","login","token","mutations","SET_AUTH_TOKEN","payload","actions","loginUserAction","context","data","post","stringify","headers","response","status","console","log","commit","access_token","localStorage","setItem","JSON","user","type","date","Date","setTime","getTime","expires","toUTCString","document","cookie","registerUserAction","logoutUserAction","getters"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nconst qs = require('query-string')\n\nexport const ClientModule = {\n  state: {\n    authorization: false,\n    login: false,\n    token: \"\"\n  },\n  mutations: {\n    SET_AUTH_TOKEN (state, payload) {\n      state.token = payload\n    }\n  },\n  actions: {\n    async loginUserAction (context, data) {\n      try {\n        const response = await axios.post('login', qs.stringify(data), {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          }\n        })\n        if (response.status === 200) {\n          console.log(response.data)\n          context.commit('SET_AUTH_TOKEN', response.data.access_token)\n          localStorage.setItem('user',JSON.stringify(response.data.user))\n          const token = response.data.access_token\n          const type = '_token'\n          const date = new Date()\n          date.setTime(date.getTime() + (24 * 60 * 60 * 1000))\n          const expires = date.toUTCString()\n          document.cookie = `${type} = ${token}; expires = ${expires}; path=/`\n          return response.status\n        }\n        return response.status\n      } catch (e) {\n        return e.response.status\n      }\n    },\n    async registerUserAction (context, data) {\n      try {\n        const response = await axios.post('register', qs.stringify(data), {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          }\n        })\n        if (response.status === 200) {\n          localStorage.setItem('user',JSON.stringify(response.data.user))\n          context.commit('SET_AUTH_TOKEN', response.data.access_token)\n          const token = response.data.access_token\n          const type = '_token'\n          const date = new Date()\n          date.setTime(date.getTime() + (24 * 60 * 60 * 1000))\n          const expires = date.toUTCString()\n          document.cookie = `${type} = ${token}; expires = ${expires}; path=/`\n          return response.status\n        }\n        return response.status\n      } catch (e) {\n        return e.response\n      }\n    },\n\n    async logoutUserAction (context, data) {\n      try {\n        const response = await axios.post('logout', qs.stringify(data), {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          }\n        })\n        if (response.status === 200) {\n          return response.status\n        }\n        return response.status\n      } catch (e) {\n        return e.response\n      }\n    },\n  },\n  getters: {\n  }\n}"]}]}